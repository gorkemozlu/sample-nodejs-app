#@ load("@ytt:data", "data")
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
   labels:
      app: test-nodejs-app
   name: nodejs-data
   namespace: #@ data.values.namespace
   annotations:
     volume.beta.kubernetes.io/storage-class: #@ data.values.storageclass.name
spec:
   accessModes:
     - ReadWriteOnce
   resources:
     requests:
       storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-nodejs-app-deployment
  namespace: #@ data.values.namespace
spec:
  selector:
    matchLabels:
      app: test-nodejs-app
  replicas: 1
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: nodejs-data
      labels:
        app: test-nodejs-app
    spec:
      serviceAccountName: #@ data.values.service_account.name
      containers:
      - name: test-app
        image: harbor.dorn.gorke.ml/nodejs/sample-app:v0.2.7
        env:
        - name: var1
          value: #@ data.values.hello.name
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: #@ data.values.secret.name
              key: username
        - name: SECRET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: #@ data.values.secret.name
              key: password
        volumeMounts:
        - mountPath: /appdir
          name: nodejs-data
        ports:
        - containerPort: 3000
      volumes:
      - name: nodejs-data
        persistentVolumeClaim:
          claimName: nodejs-data
---
apiVersion: v1
kind: Service
metadata:
  name: test-nodejs-app
  namespace: #@ data.values.namespace
  labels:
    app: test-nodejs-app
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: test-nodejs-app
  type: #@ data.values.service.type
---
#@ if data.values.ingress.url:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-nodejs-app
  namespace: #@ data.values.namespace
  labels:
    app: test-nodejs-app
  annotations:
    kubernetes.io/ingress.class: contour
spec:
  rules:
  - host: #@ data.values.ingress.url
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
           name: test-nodejs-app
           port:
             number: 80
#@ end